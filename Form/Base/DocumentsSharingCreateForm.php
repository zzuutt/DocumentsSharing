<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace DocumentsSharing\Form\Base;

use DocumentsSharing\DocumentsSharing;
use DocumentsSharing\Model\DocumentsSharingDocumentQuery;
use Thelia\Form\BaseForm;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\DateTime;
use Thelia\Core\Translation\Translator;

/**
 * Class DocumentsSharingCreateForm
 * @package DocumentsSharing\Form\Base
 * @author TheliaStudio
 */
class DocumentsSharingCreateForm extends BaseForm
{
    const FORM_NAME = "documents_sharing_create";
    const PHP_DATETIME_FORMAT = "Y-m-d H:i:s";
    const PHP_INTLDATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
    const MOMENT_JS_DATE_FORMAT = "YYYY-MM-DD HH:mm:ss";

    public function buildForm()
    {
        $translationKeys = $this->getTranslationKeys();
        $fieldsIdKeys = $this->getFieldsIdKeys();

        //$this->addShareKeyField($translationKeys, $fieldsIdKeys);
        $this->addDocumentIdField($translationKeys, $fieldsIdKeys);
        $this->addCustomerIdField($translationKeys, $fieldsIdKeys);
        $this->addGroupeIdField($translationKeys, $fieldsIdKeys);
        $this->addDateEndShareField($translationKeys, $fieldsIdKeys);
        $this->addDateLastDownloadField($translationKeys, $fieldsIdKeys);
        $this->addDeleteFileAfterField($translationKeys, $fieldsIdKeys);
        $this->addTitleField($translationKeys, $fieldsIdKeys);
        $this->addDescriptionField($translationKeys, $fieldsIdKeys);
        $this->addChapoField($translationKeys, $fieldsIdKeys);
        $this->addPostscriptumField($translationKeys, $fieldsIdKeys);
        $this->addLocaleField();
    }

    public function addLocaleField()
    {
        $this->formBuilder->add(
            'locale',
            'hidden',
            [
                'constraints' => [ new NotBlank() ],
                'required'    => true,
            ]
        );
    }

    protected function addShareKeyField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("share_key", "text", array(
            "label" => Translator::getInstance()->trans('share_key', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("share_key", $fieldsIdKeys)],
            "required" => true,
            "constraints" => array(
                new NotBlank(),
            ),
            "attr" => array(
            )
        ));
    }

    protected function addDocumentIdField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("document_id", "choice", array(
            "label" => Translator::getInstance()->trans('document_id', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("document_id", $fieldsIdKeys)],
            "required" => true,
            "multiple" => true,
            'choices' => $this->getDocumentsList(),
            "constraints" => array(
                new NotBlank(),
            ),
            "attr" => array(
            )
        ));
    }

    protected function addCustomerIdField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("customer_id", "integer", array(
            "label" => Translator::getInstance()->trans('customer_id', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("customer_id", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addGroupeIdField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("groupe_id", "integer", array(
            "label" => Translator::getInstance()->trans('groupe_id', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("groupe_id", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addDateEndShareField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("date_end_share", "datetime", array(
            "label" => Translator::getInstance()->trans('date_end_share', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => [
                "for" => $this->readKey("date_end_share", $fieldsIdKeys),
                "php_datetime_format" => static::PHP_DATETIME_FORMAT,
                "moment_js_date_format" => static::MOMENT_JS_DATE_FORMAT,
            ],
            "required" => true,
            "constraints" => array(
                new NotBlank(),
                new DateTime(),
            ),
            "widget" => "single_text",
            "format" => static::PHP_INTLDATE_FORMAT,
        ));
    }

    protected function addDateLastDownloadField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("date_last_download", "datetime", array(
            "label" => Translator::getInstance()->trans('date_last_download', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" =>  [
                "for" => $this->readKey("date_last_download", $fieldsIdKeys),
                "php_datetime_format" => static::PHP_DATETIME_FORMAT,
                "moment_js_date_format" => static::MOMENT_JS_DATE_FORMAT,
            ],
            "required" => false,
            "constraints" => array(
            ),
            "widget" => "single_text",
            "format" => static::PHP_INTLDATE_FORMAT,
        ));
    }

    protected function addDeleteFileAfterField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("delete_file_after", "checkbox", array(
            "label" => Translator::getInstance()->trans('delete_file_after', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => [
                "for" => $this->readKey("delete_file_after", $fieldsIdKeys),
                "help" => Translator::getInstance()->trans('If checked, the shared file will be erased at the end if no other sharing uses this one.', [], DocumentsSharing::MESSAGE_DOMAIN),
            ],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addTitleField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("title", "text", array(
            "label" => Translator::getInstance()->trans('title', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("title", $fieldsIdKeys)],
            "required" => true,
            "constraints" => array(
                new NotBlank(),
            ),
            "attr" => array(
                'placeholder' => Translator::getInstance()->trans('A descriptive title', [], DocumentsSharing::MESSAGE_DOMAIN),
            )
        ));
    }

    protected function addDescriptionField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("description", "textarea", array(
            "label" => Translator::getInstance()->trans('description', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => [
                "for" => $this->readKey("description", $fieldsIdKeys),
                "help" => Translator::getInstance()->trans('The detailed description.', [], DocumentsSharing::MESSAGE_DOMAIN),
            ],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
                'rows' => 10,
            )
        ));
    }

    protected function addChapoField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("chapo", "textarea", array(
            "label" => Translator::getInstance()->trans('chapo', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => [
                "for" => $this->readKey("chapo", $fieldsIdKeys),
                "help" => Translator::getInstance()->trans('A short description, used when a summary or an introduction is required', [], DocumentsSharing::MESSAGE_DOMAIN),
            ],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
                'rows' => 3,
                "placeholder" => $this->translator->trans('Short description text'),
            )
        ));
    }

    protected function addPostscriptumField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("postscriptum", "textarea", array(
            "label" => Translator::getInstance()->trans('postscriptum', [], DocumentsSharing::MESSAGE_DOMAIN),
            "label_attr" => [
                "for" => $this->readKey("postscriptum", $fieldsIdKeys),
                "help" => Translator::getInstance()->trans('A short text, used when an additional or supplemental information is required.', [], DocumentsSharing::MESSAGE_DOMAIN),
            ],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
                'rows' => 3,
                'placeholder' => $this->translator->trans('Short additional text'),
            )
        ));
    }

    public function getDocumentsList()
    {
        $customerList = array();
        $customer = DocumentsSharingDocumentQuery::create()->orderByFile();
        foreach($customer as $value)
        {
            $key = $value->getTitle();
            $customerList[$value->getId()] = $key;
        }
        return $customerList;
    }

    public function getName()
    {
        return static::FORM_NAME;
    }

    public function readKey($key, array $keys, $default = '')
    {
        if (isset($keys[$key])) {
            return $keys[$key];
        }

        return $default;
    }

    public function getTranslationKeys()
    {
        return array();
    }

    public function getFieldsIdKeys()
    {
        return array(
            "share_key" => "documents_sharing_share_key",
            "document_id" => "documents_sharing_document_id",
            "customer_id" => "documents_sharing_customer_id",
            "groupe_id" => "documents_sharing_groupe_id",
            "date_end_share" => "documents_sharing_date_end_share",
            "date_last_download" => "documents_sharing_date_last_download",
            "delete_file_after" => "documents_sharing_delete_file_after",
            "title" => "documents_sharing_title",
            "description" => "documents_sharing_description",
            "chapo" => "documents_sharing_chapo",
            "postscriptum" => "documents_sharing_postscriptum",
        );
    }
}
