<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace DocumentsSharing\Action\Base;

use DocumentsSharing\Model\Map\DocumentsSharingTableMap;
use DocumentsSharing\Event\DocumentsSharingEvent;
use DocumentsSharing\Event\DocumentsSharingEvents;
use DocumentsSharing\Event\DocumentsSharingDocumentEvents;
use DocumentsSharing\Event\DocumentsSharingDocumentEvent;
use DocumentsSharing\Model\DocumentsSharingQuery;
use DocumentsSharing\Model\DocumentsSharing;
use Propel\Runtime\ActiveQuery\Criteria;
use Thelia\Action\BaseAction;
use Thelia\Core\Event\ToggleVisibilityEvent;
use Thelia\Core\Event\UpdatePositionEvent;
use Propel\Runtime\Propel;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Thelia\Core\Event\TheliaEvents;
use \Thelia\Core\Event\TheliaFormEvent;

/**
 * Class DocumentsSharingAction
 * @package DocumentsSharing\Action
 * @author TheliaStudio
 */
class DocumentsSharingAction extends BaseAction implements EventSubscriberInterface
{
    public function create(DocumentsSharingEvent $event)
    {
        $this->createOrUpdate($event, new DocumentsSharing());
    }

    public function update(DocumentsSharingEvent $event)
    {
        $model = $this->getDocumentsSharing($event);

        $this->createOrUpdate($event, $model);
    }

    public function delete(DocumentsSharingEvent $event)
    {
        $this->getDocumentsSharing($event)->delete();
    }

    protected function createOrUpdate(DocumentsSharingEvent $event, DocumentsSharing $model)
    {
        $con = Propel::getConnection(DocumentsSharingTableMap::DATABASE_NAME);
        $con->beginTransaction();

        try {
            $model->setLocale($event->getLocale());

            if (null !== $id = $event->getId()) {
                $model->setId($id);
            }

            if (null !== $shareKey = $event->getShareKey()) {
                $model->setShareKey($shareKey);
            }

            if (null !== $documentId = $event->getDocumentId()) {
                $model->setDocumentId($documentId);
            }

            //if (null !== $customerId = $event->getCustomerId()) {
                $model->setCustomerId($event->getCustomerId());
            //}

            //if (null !== $groupeId = $event->getGroupeId()) {
                $model->setGroupeId($event->getGroupeId());
            //}

            if (null !== $dateEndShare = $event->getDateEndShare()) {
                $model->setDateEndShare($dateEndShare);
            }

            if (null !== $dateLastDownload = $event->getDateLastDownload()) {
                $model->setDateLastDownload($dateLastDownload);
            }

            if (null !== $deleteFileAfter = $event->getDeleteFileAfter()) {
                $model->setDeleteFileAfter($deleteFileAfter);
            }

            if (null !== $title = $event->getTitle()) {
                $model->setTitle($title);
            }

            if (null !== $description = $event->getDescription()) {
                $model->setDescription($description);
            }

            if (null !== $chapo = $event->getChapo()) {
                $model->setChapo($chapo);
            }

            if (null !== $postscriptum = $event->getPostscriptum()) {
                $model->setPostscriptum($postscriptum);
            }

            $model->save($con);

            $con->commit();
        } catch (\Exception $e) {
            $con->rollback();

            throw $e;
        }

        $event->setDocumentsSharing($model);
    }

    protected function getDocumentsSharing(DocumentsSharingEvent $event)
    {
        $model = DocumentsSharingQuery::create()->findPk($event->getId());

        if (null === $model) {
            throw new \RuntimeException(sprintf(
                "The 'documents_sharing' id '%d' doesn't exist",
                $event->getId()
            ));
        }

        return $model;
    }

    public function beforeCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function beforeUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    public function check(DocumentsSharingEvent $event)
    {
        $listSharesExpired = DocumentsSharingQuery::create()->orderByDateEndShare(Criteria::DESC)->filterByDateEndShare(array('max' => 'now'))->find();
        if(count($listSharesExpired)){
            foreach($listSharesExpired as $list) {
                if($list->getDeleteFileAfter()){
                    $list_document = explode(',', $list->getDocumentId());
                    foreach($list_document as $docId) {
                        $eventDocument = new DocumentsSharingDocumentEvent();
                        $eventDocument->setId($docId);
                        $event->getDispatcher()->dispatch(DocumentsSharingDocumentEvents::CHECK, $eventDocument);
                    }

                }
                $eventShare = new DocumentsSharingEvent();
                $eventShare->setId($list->getId());
                $event->getDispatcher()->dispatch(DocumentsSharingEvents::DELETE, $eventShare);
            }
        }

    }

    /**
     * Returns an array of event names this subscriber wants to listen to.
     *
     * The array keys are event names and the value can be:
     *
     *  * The method name to call (priority defaults to 0)
     *  * An array composed of the method name to call and the priority
     *  * An array of arrays composed of the method names to call and respective
     *    priorities, or 0 if unset
     *
     * For instance:
     *
     *  * array('eventName' => 'methodName')
     *  * array('eventName' => array('methodName', $priority))
     *  * array('eventName' => array(array('methodName1', $priority), array('methodName2'))
     *
     * @return array The event names to listen to
     *
     * @api
     */
    public static function getSubscribedEvents()
    {
        return array(
            DocumentsSharingEvents::CREATE => array("create", 128),
            DocumentsSharingEvents::UPDATE => array("update", 128),
            DocumentsSharingEvents::DELETE => array("delete", 128),DocumentsSharingEvents::CHECK => array("check", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".documents_sharing_create" => array("beforeCreateFormBuild", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".documents_sharing_update" => array("beforeUpdateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".documents_sharing_create" => array("afterCreateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".documents_sharing_update" => array("afterUpdateFormBuild", 128),
        );
    }
}
