<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace DocumentsSharing\Controller\Base;

use Symfony\Component\HttpFoundation\RedirectResponse;
use Thelia\Controller\Admin\AbstractCrudController;
use Thelia\Core\Security\Resource\AdminResources;
use Thelia\Tools\URL;
use DocumentsSharing\Event\DocumentsSharingEvent;
use DocumentsSharing\Event\DocumentsSharingEvents;
use DocumentsSharing\Model\DocumentsSharingQuery;

/**
 * Class DocumentsSharingController
 * @package DocumentsSharing\Controller\Base
 * @author TheliaStudio
 */
class DocumentsSharingController extends AbstractCrudController
{
    public function __construct()
    {
        parent::__construct(
            "documents_sharing",
            "id",
            "order",
            AdminResources::MODULE,
            DocumentsSharingEvents::CREATE,
            DocumentsSharingEvents::UPDATE,
            DocumentsSharingEvents::DELETE,
            null,
            null,
            "DocumentsSharing"
        );
    }

    /**
     * Return the creation form for this object
     */
    protected function getCreationForm()
    {
        return $this->createForm("documents_sharing.create");
    }

    /**
     * Return the update form for this object
     */
    protected function getUpdateForm($data = array())
    {
        if (!is_array($data)) {
            $data = array();
        }

        return $this->createForm("documents_sharing.update", "form", $data);
    }

    /**
     * Hydrate the update form for this object, before passing it to the update template
     *
     * @param mixed $object
     */
    protected function hydrateObjectForm($object)
    {
        $data = array(
            "id" => $object->getId(),
            "share_key" => $object->getShareKey(),
            "document_id" => explode(',',$object->getDocumentId()),
            "customer_id" => $object->getCustomerId(),
            "groupe_id" => $object->getGroupeId(),
            "date_end_share" => $object->getDateEndShare(),
            "date_last_download" => $object->getDateLastDownload(),
            "delete_file_after" => (bool) $object->getDeleteFileAfter(),
            "title" => $object->getTitle(),
            "description" => $object->getDescription(),
            "chapo" => $object->getChapo(),
            "postscriptum" => $object->getPostscriptum(),
            "locale" => 'fr_FR',
        );

        return $this->getUpdateForm($data);
    }

    /**
     * Creates the creation event with the provided form data
     *
     * @param mixed $formData
     * @return \Thelia\Core\Event\ActionEvent
     */
    protected function getCreationEvent($formData)
    {
        $event = new DocumentsSharingEvent();

        $event->setShareKey($this->random(32));
        $event->setDocumentId(implode(',',$formData["document_id"]));
        $event->setCustomerId($formData["customer_id"]);
        $event->setGroupeId($formData["groupe_id"]);
        $event->setDateEndShare($formData["date_end_share"]);
        $event->setDateLastDownload(isset($formData["date_last_download"]) ? $formData["date_last_download"] : null);
        $event->setDeleteFileAfter($formData["delete_file_after"]);
        $event->setTitle($formData["title"]);
        $event->setDescription($formData["description"]);
        $event->setChapo($formData["chapo"]);
        $event->setPostscriptum($formData["postscriptum"]);

        return $event;
    }

    /**
     * Creates the update event with the provided form data
     *
     * @param mixed $formData
     * @return \Thelia\Core\Event\ActionEvent
     */
    protected function getUpdateEvent($formData)
    {
        $event = new DocumentsSharingEvent();

        $event->setId($formData["id"]);
        $event->setShareKey($formData["share_key"]);
        $event->setDocumentId(implode(',',$formData["document_id"]));
        $event->setCustomerId($formData["customer_id"]);
        $event->setGroupeId($formData["groupe_id"]);
        $event->setDateEndShare($formData["date_end_share"]);
        $event->setDateLastDownload(isset($formData["date_last_download"]) ? $formData["date_last_download"] : null);
        $event->setDeleteFileAfter($formData["delete_file_after"]);
        $event->setTitle($formData["title"]);
        $event->setDescription($formData["description"]);
        $event->setChapo($formData["chapo"]);
        $event->setPostscriptum($formData["postscriptum"]);

        return $event;
    }

    /**
     * Creates the delete event with the provided form data
     */
    protected function getDeleteEvent()
    {
        $event = new DocumentsSharingEvent();

        $event->setId($this->getRequest()->request->get("documents_sharing_id"));

        return $event;
    }

    /**
     * Return true if the event contains the object, e.g. the action has updated the object in the event.
     *
     * @param mixed $event
     */
    protected function eventContainsObject($event)
    {
        return null !== $this->getObjectFromEvent($event);
    }

    /**
     * Get the created object from an event.
     *
     * @param mixed $event
     */
    protected function getObjectFromEvent($event)
    {
        return $event->getDocumentsSharing();
    }

    /**
     * Load an existing object from the database
     */
    protected function getExistingObject()
    {
        return DocumentsSharingQuery::create()
            ->findPk($this->getRequest()->query->get("documents_sharing_id"))
        ;
    }

    /**
     * Returns the object label form the object event (name, title, etc.)
     *
     * @param mixed $object
     */
    protected function getObjectLabel($object)
    {
        return $object->getTitle();
    }

    /**
     * Returns the object ID from the object
     *
     * @param mixed $object
     */
    protected function getObjectId($object)
    {
        return $object->getId();
    }

    /**
     * Render the main list template
     *
     * @param mixed $currentOrder , if any, null otherwise.
     */
    protected function renderListTemplate($currentOrder)
    {
        $this->getParser()
            ->assign("order", $currentOrder)
        ;

        return $this->render("documents-sharings");
    }

    /**
     * Render the edition template
     */
    protected function renderEditionTemplate()
    {
        $this->getParserContext()
            ->set(
                "documents_sharing_id",
                $this->getRequest()->query->get("documents_sharing_id")
            )
        ;

        return $this->render("documents-sharing-edit");
    }

    /**
     * Must return a RedirectResponse instance
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    protected function redirectToEditionTemplate()
    {
        $id = $this->getRequest()->query->get("documents_sharing_id");

        return new RedirectResponse(
            URL::getInstance()->absoluteUrl(
                "/admin/module/DocumentsSharing/documents_sharing/edit",
                [
                    "documents_sharing_id" => $id,
                ]
            )
        );
    }

    /**
     * Must return a RedirectResponse instance
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    protected function redirectToListTemplate()
    {
        return new RedirectResponse(
            URL::getInstance()->absoluteUrl("/admin/module/DocumentsSharing/documents_sharing")
        );
    }

    private function seed_mt_rand() {
        static $done;
        if (!$done) {
            $hash = md5(microtime());
            $length = ((substr($hash,0,1) < '8') ? 8 : 7 );
            mt_srand((int)base_convert(substr($hash,0,$length),16,10));
            $done = TRUE;
        }
    }
    private function random($car) {
        $string = "";
        $chaine = "A-1B2Cabdfgruipzw3D4E5F6G7HI8J9K_LM@NPQRSAazsdfgjnbvcpomlTUVBWXYZ12-34C56789DEGHFZfderfgre@zgztrgergtyjhtuisgrTRUYWV_-";
        $this->seed_mt_rand();
        for($i=0; $i<$car; $i++) {
            $string .= $chaine[mt_rand()%strlen($chaine)];
        }
        return $string;
    }
}

